name: Release APK

on: [push, pull_request]

jobs:
  apk:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js v12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - run: yarn install

      - run: cd android && ./gradlew assembleRelease && cd ..
        name: Build Android apk (release)

      - name: Upload APK
        uses: actions/upload-artifact@v2-preview # This action will upload a build apk you can then test.
        with:
          name: apk
          path: android/app/build/outputs/apk/release/app-release.apk
  ipa:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build archive
        run: cd ios && yarn install && pod install && xcodebuild archive -workspace ./CiCdTestingApp.xcworkspace -scheme CiCdTestingApp -destination 'generic/platform=iOS' -archivePath ../builds/CiCdTestingApp.xcarchive
  release:
    name: Release APK/IPA
    needs: [apk, ipa]
    runs-on: macos-latest
    steps:
      - name: Download APK from build
        uses: actions/download-artifact@v1
        with:
          name: apk
      - name: Download IPA from build
        uses: actions/download-artifact@v1
        with:
          name: ipa
      - name: Create APK Release
        id: create_apk_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.run_number }}APK
          release_name: ${{ github.event.repository.name }} v${{ github.run_number }}APK
      - name: Create IPARelease
        id: create_ipa_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.run_number }}IPA
          release_name: ${{ github.event.repository.name }} v${{ github.run_number }}IPA
      - name: Upload Release APK/IPA
        id: upload_release_asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_apk_release.outputs.upload_url }}, ${{ steps.create_ipa_release.outputs.upload_url }}
          asset_path: apk/app-release.apk, ipa/CiCdTestingApp.ipa
          asset_name: ${{ github.event.repository.name }}.apk, ${{ github.event.repository.name }}.ipa
          asset_content_type: application/zip
